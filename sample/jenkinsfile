pipeline {
    agent any
    stages {
        stage('Build') {
            steps {
                println "Build Started"
                println "Build End"
            }
        }
        stage('Test') {
            steps {
                println "Test Started"
                script {
                    myStage = input message: 'What stage do you want to run now?', parameters: [choice(choices: 'Proceed Provision\nSkip Provision', description: '', name: 'Stage')]
                }
                echo myStage
                println "Test End"
            }
        }
        stage('Provision') {
            when {
                expression { myStage == 'Proceed Provision' }
            }
            steps {
                println "Provision Started"
                sh "script -qc 'su cosmos /home/cosmos/git/ansible-playbooks/provision.sh' | tail -n +2"
                println "Provision End"
            }
        }
        stage('Deploy') {
            steps {
                println "Deploy Started"
                script {
                    publicipadress = input message: 'Define the host to deploy', parameters: [string(defaultValue: '', description: '', name: 'publicip')]
                    shelltest = "azureuser@$publicipadress:~/"
                    sh ‘scp -o "StrictHostKeyChecking no" ./sample/deploy.sh $shelltest'
                    sh ‘scp -o "StrictHostKeyChecking no" ./sample/deploy.sh "azureuser@$publicipadress":~/’

                }
                println "Deploy End"
            }
        }
    }
    post {
        always {
            echo 'Rose Job End'
        }
        /*success {
            slackSend channel: '#ops-room',
                color: 'good',
                message: "The pipeline ${currentBuild.fullDisplayName} completed successfully."
        }*/
        failure {
            mail to: 'cosmos0703@gmail.com',
                subject: "Failed Pipeline: ${currentBuild.fullDisplayName}",
                body: "Something is wrong with ${env.BUILD_URL}"
        }
    }
}
// node 키워드로 파이프라인을 정의하면, script {} 없이 if-else와 같은 스크립트 작성 가능
node {
  stage('Example') {
      if (env.BRANCH_NAME == 'master') {
          echo 'I only execute on the master branch'
      } else {
          echo 'I execute elsewhere'
      }
  }
}
